version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - AWS_ACCESS_KEY_ID=${aws_access_key_id:-test}
      - AWS_SECRET_ACCESS_KEY=${aws_secret_access_key:-test}
      - AWS_REGION=${aws_region:-us-east-1}
      - AWS_ENDPOINT_URL=${aws_endpoint_url:-http://localstack:4566}
      - SQS_QUEUE_URL=${sqs_queue_url:-http://localstack:4566/000000000000/task-queue}
      - SQS_MAX_MESSAGES=${sqs_max_messages:-10}
      - SQS_WAIT_TIME_SECONDS=${sqs_wait_time_seconds:-20}
      - SQS_VISIBILITY_TIMEOUT=${sqs_visibility_timeout:-300}
    volumes:
      # Mount database file to persist data
      - ./data:/app/data
    networks:
      - default-net
    depends_on:
      - postgres
      - localstack
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health/live']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8001:8000'
      - '5678:5678' # Debug port
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PYTHONASYNCIODEBUG=1
      - AWS_ACCESS_KEY_ID=${aws_access_key_id:-test}
      - AWS_SECRET_ACCESS_KEY=${aws_secret_access_key:-test}
      - AWS_REGION=${aws_region:-us-east-1}
      - AWS_ENDPOINT_URL=${aws_endpoint_url:-http://localstack:4566}
      - SQS_QUEUE_URL=${sqs_queue_url:-http://localstack:4566/000000000000/task-queue}
      - SQS_MAX_MESSAGES=${sqs_max_messages:-10}
      - SQS_WAIT_TIME_SECONDS=${sqs_wait_time_seconds:-20}
      - SQS_VISIBILITY_TIMEOUT=${sqs_visibility_timeout:-300}
    volumes:
      # Mount source code for hot reload
      - ./app:/app/app
      - ./data:/app/data
    networks:
      - default-net
    depends_on:
      - postgres
      - localstack
    command:
      [
        'uv',
        'run',
        'uvicorn',
        'app.main:app',
        '--host',
        '0.0.0.0',
        '--port',
        '8000',
        '--reload',
      ]
    restart: unless-stopped

  # Debug service with debugpy
  app-debug:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8002:8000'
      - '5678:5678' # Debug port
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PYTHONASYNCIODEBUG=1
      - AWS_ACCESS_KEY_ID=${aws_access_key_id:-test}
      - AWS_SECRET_ACCESS_KEY=${aws_secret_access_key:-test}
      - AWS_REGION=${aws_region:-us-east-1}
      - AWS_ENDPOINT_URL=${aws_endpoint_url:-http://localstack:4566}
      - SQS_QUEUE_URL=${sqs_queue_url:-http://localstack:4566/000000000000/task-queue}
      - SQS_MAX_MESSAGES=${sqs_max_messages:-10}
      - SQS_WAIT_TIME_SECONDS=${sqs_wait_time_seconds:-20}
      - SQS_VISIBILITY_TIMEOUT=${sqs_visibility_timeout:-300}
    volumes:
      # Mount source code for hot reload
      - ./app:/app/app
      - ./data:/app/data
    networks:
      - default-net
    depends_on:
      - postgres
      - localstack
    command:
      [
        'uv',
        'run',
        'python',
        '-m',
        'debugpy',
        '--listen',
        '0.0.0.0:5678',
        '--wait-for-client',
        '-m',
        'uvicorn',
        'app.main:app',
        '--host',
        '0.0.0.0',
        '--port',
        '8000',
        '--reload',
      ]
    restart: unless-stopped

  postgres:
    image: postgres:16.2-alpine3.19
    environment:
      - POSTGRES_DB=${psql_db_database}
      - POSTGRES_USER=${psql_db_username}
      - POSTGRES_PASSWORD=${psql_db_password}
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${psql_db_username}
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    networks:
      - default-net

  makemigrations:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - POSTGRES_URL=${postgres_url}
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./alembic/versions:/app/alembic/versions
    depends_on:
      - postgres
      - localstack
    entrypoint: ['uv', 'run', 'python', '-m', 'alembic']
    command: ['revision', '--autogenerate', '-m', 'auto']
    networks:
      - default-net

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - POSTGRES_URL=${postgres_url}
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./alembic/versions:/app/alembic/versions
    depends_on:
      - postgres
      - localstack
    entrypoint: ['uv', 'run', 'python', '-m', 'alembic']
    command: ['upgrade', 'head']
    networks:
      - default-net
  ruff-fix:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./app:/app/app
      - ./ruff.toml:/app/ruff.toml
    entrypoint: ['uv', 'run', 'ruff']
    command: ['check', 'app', '--fix']
    networks:
      - default-net

  ruff-format:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./app:/app/app
      - ./ruff.toml:/app/ruff.toml
    entrypoint: ['uv', 'run', 'ruff']
    command: ['format', 'app']
    networks:
      - default-net

  # SQS Worker service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - AWS_ACCESS_KEY_ID=${aws_access_key_id:-test}
      - AWS_SECRET_ACCESS_KEY=${aws_secret_access_key:-test}
      - AWS_REGION=${aws_region:-us-east-1}
      - AWS_ENDPOINT_URL=${aws_endpoint_url:-http://localstack:4566}
      - SQS_QUEUE_URL=${sqs_queue_url:-http://localstack:4566/000000000000/task-queue}
      - SQS_MAX_MESSAGES=${sqs_max_messages:-10}
      - SQS_WAIT_TIME_SECONDS=${sqs_wait_time_seconds:-20}
      - SQS_VISIBILITY_TIMEOUT=${sqs_visibility_timeout:-300}
    volumes:
      - ./app:/app/app
      - ./scripts:/app/scripts
      - ./worker.log:/app/worker.log
    networks:
      - default-net
    depends_on:
      - postgres
      - localstack
    command: ['uv', 'run', 'python', 'scripts/worker.py']
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'python',
          '-c',
          'import os; exit(0 if os.path.exists("/app/worker.log") else 1)',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # LocalStack for local AWS services testing
  localstack:
    image: localstack/localstack:3.0
    container_name: localstack-sqs
    ports:
      - '4566:4566' # LocalStack Gateway
      - '4510-4559:4510-4559' # External services port range
    environment:
      - SERVICES=sqs,lambda,logs,iam
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_ENDPOINT_URL=http://localstack:4566
      - LAMBDA_DOCKER_NETWORK=events-with-fast-api_default-net
      - LAMBDA_REMOVE_CONTAINERS=true
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './scripts/localstack-init.sh:/etc/localstack/init/ready.d/init-sqs.sh'
    networks:
      - default-net
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4566/_localstack/health']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  data:
  postgres-data:

networks:
  default-net:
