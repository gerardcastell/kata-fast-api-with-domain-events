version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - '8000:8000'
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=false
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      # Mount database file to persist data
      - ./data:/app/data
    networks:
      - default-net
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health/live']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  app-dev:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - '8001:8000'
      - '5678:5678' # Debug port
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PYTHONASYNCIODEBUG=1
    volumes:
      # Mount source code for hot reload
      - ./app:/app/app
      - ./data:/app/data
    networks:
      - default-net
    depends_on:
      - postgres
    command:
      [
        'uv',
        'run',
        'uvicorn',
        'app.main:app',
        '--host',
        '0.0.0.0',
        '--port',
        '8000',
        '--reload',
      ]
    profiles:
      - dev
    restart: unless-stopped

  # Debug service with debugpy
  app-debug:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - '8002:8000'
      - '5678:5678' # Debug port
    environment:
      - PYTHONPATH=/app
      - SQLITE_URL=${sqlite_url}
      - POSTGRES_URL=${postgres_url}
      - CREATE_TABLES_ON_STARTUP=${create_tables_on_startup}
      - DEBUG=true
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PYTHONASYNCIODEBUG=1
    volumes:
      # Mount source code for hot reload
      - ./app:/app/app
      - ./data:/app/data
    networks:
      - default-net
    depends_on:
      - postgres
    command:
      [
        'uv',
        'run',
        'python',
        '-m',
        'debugpy',
        '--listen',
        '0.0.0.0:5678',
        '--wait-for-client',
        '-m',
        'uvicorn',
        'app.main:app',
        '--host',
        '0.0.0.0',
        '--port',
        '8000',
        '--reload',
      ]
    profiles:
      - debug
    restart: unless-stopped

  postgres:
    image: postgres:16.2-alpine3.19
    environment:
      - POSTGRES_DB=${psql_db_database}
      - POSTGRES_USER=${psql_db_username}
      - POSTGRES_PASSWORD=${psql_db_password}
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${psql_db_username}
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - default-net

  makemigrations:
    build:
      context: .
      dockerfile: dockerfile
    environment:
      - PYTHONPATH=/app
      - POSTGRES_URL=${postgres_url}
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    depends_on:
      - postgres
    entrypoint: ["uv", "run", "python", "-m", "alembic"]
    command: ["revision", "--autogenerate", "-m", "auto"]
    networks:
      - default-net

  migrate:
    build:
      context: .
      dockerfile: dockerfile
    environment:
      - PYTHONPATH=/app
      - POSTGRES_URL=${postgres_url}
    volumes:
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
    depends_on:
      - postgres
    entrypoint: ["uv", "run", "python", "-m", "alembic"]
    command: ["upgrade", "head"]
    networks:
      - default-net
  ruff-fix:
    build:
      context: .
      dockerfile: dockerfile
    working_dir: /app
    volumes:
      - ./app:/app/app
      - ./ruff.toml:/app/ruff.toml
    entrypoint: ["uv", "run", "ruff"]
    command: ["check", "app", "--fix"]
    networks:
      - default-net
    profiles:
      - dev
    
  ruff-format:
    build:
      context: .
      dockerfile: dockerfile
    working_dir: /app
    volumes:
      - ./app:/app/app
      - ./ruff.toml:/app/ruff.toml
    entrypoint: ["uv", "run", "ruff"]
    command: ["format", "app"]
    networks:
      - default-net
    profiles:
      - dev

volumes:
  data:
  postgres-data:

networks:
  default-net:
